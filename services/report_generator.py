from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.pdfgen import canvas
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from datetime import datetime

class ReportGenerator:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        # Create custom styles
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#2C3E50')
        )
        
        self.section_header = ParagraphStyle(
            'SectionHeader',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceBefore=20,
            spaceAfter=10,
            textColor=colors.HexColor('#2980B9'),
            borderWidth=1,
            borderColor=colors.HexColor('#BDC3C7'),
            borderPadding=10
        )
        
        self.normal_style = ParagraphStyle(
            'CustomNormal',
            parent=self.styles['Normal'],
            fontSize=11,
            leading=14,
            spaceAfter=8,
            textColor=colors.HexColor('#2C3E50')
        )

    def header_footer(self, canvas, doc):
        canvas.saveState()
        # Header
        canvas.setFillColor(colors.HexColor('#2C3E50'))
        canvas.setFont('Helvetica-Bold', 10)
        canvas.drawString(inch, doc.pagesize[1] - 0.5*inch, "Security Footprinting Report")
        canvas.setFont('Helvetica', 9)
        canvas.drawRightString(doc.pagesize[0] - inch, doc.pagesize[1] - 0.5*inch, 
                             datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        
        # Footer
        canvas.setFont('Helvetica', 9)
        canvas.drawString(inch, 0.5*inch, "Generated by FootprintX Tool")
        canvas.drawRightString(doc.pagesize[0] - inch, 0.5*inch, 
                             f"Page {doc.page}")
        
        # Add horizontal lines
        canvas.setStrokeColor(colors.HexColor('#BDC3C7'))
        canvas.line(inch, doc.pagesize[1] - 0.6*inch, doc.pagesize[0] - inch, doc.pagesize[1] - 0.6*inch)
        canvas.line(inch, 0.7*inch, doc.pagesize[0] - inch, 0.7*inch)
        canvas.restoreState()

    def create_pdf(self, data, output):
        doc = SimpleDocTemplate(
            output,
            pagesize=A4,
            rightMargin=inch,
            leftMargin=inch,
            topMargin=inch,
            bottomMargin=inch
        )

        story = []
        
        # Title section with box
        title = Paragraph(f"Security Footprinting Report", self.title_style)
        subtitle = Paragraph(f"Domain: {data['domain']}", 
                           ParagraphStyle('Subtitle', parent=self.title_style, fontSize=16))
        story.extend([title, subtitle, Spacer(1, 30)])

        # Executive Summary
        story.append(Paragraph("Executive Summary", self.section_header))
        summary_text = f"""This report provides a comprehensive security assessment of the domain {data['domain']}. 
        The scan was performed on {data['scan_date']} and includes detailed analysis of DNS records, SSL certificates, 
        network configuration, and potential security vulnerabilities."""
        story.append(Paragraph(summary_text, self.normal_style))
        story.append(Spacer(1, 20))

        # Key Findings
        story.append(PageBreak())
        story.append(Paragraph("Detailed Analysis", self.section_header))

        # Process each section
        for section, content in data['results'].items():
            story.append(Paragraph(section, self.section_header))
            
            if isinstance(content, dict):
                # Create professional looking table
                table_data = [[Paragraph(str(k), self.normal_style), 
                             Paragraph(str(v), self.normal_style)] 
                            for k, v in content.items()]
                table = Table(table_data, colWidths=[doc.width*0.3, doc.width*0.5])
                table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#F8F9F9')),
                    ('TEXTCOLOR', (0, 0), (-1, -1), colors.HexColor('#2C3E50')),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('TOPPADDING', (0, 0), (-1, -1), 6),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                    ('LEFTPADDING', (0, 0), (-1, -1), 8),
                    ('RIGHTPADDING', (0, 0), (-1, -1), 8),
                    ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#BDC3C7')),
                    ('ROWBACKGROUNDS', (0, 0), (-1, -1), [colors.HexColor('#F8F9F9'), colors.white])
                ]))
                story.append(table)
            else:
                story.append(Paragraph(str(content), self.normal_style))
            
            story.append(Spacer(1, 20))

        doc.build(story, onFirstPage=self.header_footer, onLaterPages=self.header_footer)
